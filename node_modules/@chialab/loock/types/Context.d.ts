/**
 * @typedef {(context: Context) => boolean|Promise<boolean>} DismissFunction
 */
/**
 * @typedef {Object} ContextOptions
 * @property {boolean} [initialize] Self initialize the context.
 * @property {string|string[]} [selectors] A list of focusable selectors.
 * @property {string|string[]} [ignore] A list of selectors to ignore.
 * @property {boolean|DismissFunction} [dismiss] A dismiss rule for the context.
 * @property {boolean} [disabled] Disabled state of the context.
 */
/**
 * Store the context of the element.
 * @param {HTMLElement} element The root element of the context.
 * @param {Context} context The context.
 */
export function setContext(element: HTMLElement, context: Context): void;
/**
 * Get the context of the element.
 * @param {HTMLElement} element The root element of the context.
 * @returns {Context} The context of the element.
 */
export function getContext(element: HTMLElement): Context;
/**
 * Default focusable selectors.
 */
export const DEFAULT_SELECTORS: string[];
/**
 * Default ignore selectors.
 */
export const DEFAULT_IGNORE_SELECTORS: string[];
/**
 * Loock context class.
 * @property {Loock} parent The Loock instance to bound.
 * @property {boolean} isActive The context state.
 */
export class Context {
    /**
     * Create a new context.
     * @param {HTMLElement} element The root element of the context.
     * @param {ContextOptions} options A set of options for the context.
     * @param {import('./Manager.js').Manager} [parent] A set of options for the context.
     */
    constructor(element: HTMLElement, options?: ContextOptions, parent?: import('./Manager.js').Manager);
    /**
     * Active state of the context.
     */
    get active(): boolean;
    /**
     * Disabled state of the context.
     */
    get disabled(): boolean;
    element: HTMLElement;
    /**
     * @protected
     */
    protected focusableSelectors: string[];
    /**
     * @protected
     */
    protected ignoredSelectors: string[];
    /**
     * @protected
     * @type {boolean|DismissFunction}
     */
    protected dismiss: boolean | DismissFunction;
    /**
     * @protected
     */
    protected parent: import("./Manager.js").Manager;
    /**
     * @private
     */
    private _active;
    /**
     * @private
     */
    private _currentElement;
    /**
     * @private
     */
    private _lastKeydownTime;
    /**
     * @private
     */
    private _tabIndex;
    /**
     * @private
     */
    private onClick;
    /**
     * Set focusable selectors.
     * @param {string|string[]} selectors The selectors to set.
     */
    setFocusableSelectors(selectors: string | string[]): void;
    /**
     * Set selectors for elements to ignore.
     * @param {string|string[]} selectors The selectors to ignore,
     */
    setIgnoredSelectors(selectors: string | string[]): void;
    /**
     * Returns focusable children elements.
     *
     * @returns {HTMLElement[]} focusable children of root element.
     */
    findFocusableChildren(): HTMLElement[];
    /**
     *
     * @param {boolean|DismissFunction} dismiss
     */
    setDismiss(dismiss: boolean | DismissFunction): void;
    /**
     * Active previous focusable element.
     *
     * @returns {void}
     */
    prev(): void;
    /**
     * Active next focusable element.
     *
     * @returns {void}
     */
    next(): void;
    /**
     * Entering the context.
     * @param {HTMLElement} [target] The target element to focus.
     * @returns {Promise<void>}
     */
    enter(target?: HTMLElement): Promise<void>;
    /**
     * Restore the focus on the last element.
     * @returns {void}
     */
    restore(): void;
    /**
     * Exit from the context.
     *
     * @returns {Promise<boolean>}
     */
    exit(): Promise<boolean>;
    /**
     * Force exit from the context.
     *
     * @returns {Promise<void>}
     */
    forceExit(): Promise<void>;
    /**
     * Set the current element of the context.
     * @param {HTMLElement} element
     * @param {boolean} focus Should focus the element.
     */
    setCurrentElement(element: HTMLElement, focus?: boolean): void;
    /**
     * Unset the current element of the context.
     * @param {boolean} restore Should restore focus to container element.
     */
    unsetCurrentElement(restore?: boolean): void;
    /**
     * Check if the context has a focused child.
     *
     * @returns {boolean}
     */
    hasCurrentElement(): boolean;
    /**
     * Attach the context to a Loock instance.
     * @param {import('./Manager.js').Manager} parent The parent loock instance.
     */
    attach(parent: import('./Manager.js').Manager): void;
    /**
     * Detach the context from the current Loock instance.
     */
    detach(): void;
    /**
     * Enable the context that has been disabled.
     */
    enable(): void;
    _disabled: boolean;
    /**
     * Disable the context.
     */
    disable(): void;
}
export type DismissFunction = (context: Context) => boolean | Promise<boolean>;
export type ContextOptions = {
    /**
     * Self initialize the context.
     */
    initialize?: boolean;
    /**
     * A list of focusable selectors.
     */
    selectors?: string | string[];
    /**
     * A list of selectors to ignore.
     */
    ignore?: string | string[];
    /**
     * A dismiss rule for the context.
     */
    dismiss?: boolean | DismissFunction;
    /**
     * Disabled state of the context.
     */
    disabled?: boolean;
};
