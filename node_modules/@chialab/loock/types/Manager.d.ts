/**
 * A manager for Loock contexts.
 */
export class Manager {
    /**
     * Create a new Loock instance.
     * @param {Window} root
     */
    constructor(root?: Window);
    /**
     * @readonly
     */
    readonly root: Window;
    /**
     * @protected
     * @type {Context[]}
     */
    protected contexts: Context[];
    /**
     * @protected
     * @type {Context[]}
     */
    protected actives: Context[];
    /**
     * @protected
     * @type {Context}
     */
    protected defaultContext: Context;
    /**
     * @protected
     * @type {Context}
     */
    protected activeContext: Context;
    /**
     * @private
     * @type {HTMLElement}
     */
    private _activeElement;
    /**
     * @private
     * @type {WeakMap<Context, { onFocusEnter: (event: Event) => void; onFocusExit: (event: Event) => void; }>}
     */
    private _listeners;
    /**
     * @private
     */
    private onKeyDown;
    _lastKeydownTime: number;
    /**
     * @private
     */
    private onFocusIn;
    /**
     * @private
     */
    private onIframeFocus;
    /**
     * Create a default context.
     *
     * @param {HTMLElement} element The root of the default context.
     * @param {import('./Context.js').ContextOptions} options A set of options for the context.
     * @returns {Context} New context
     */
    createDefaultContext(element: HTMLElement, options?: import('./Context.js').ContextOptions): Context;
    /**
     * Create a new context.
     *
     * @param {HTMLElement} element The root element of the context.
     * @param {import('./Context.js').ContextOptions} options A set of options for the context.
     * @returns {Context} New context
     */
    createContext(element: HTMLElement, options?: import('./Context.js').ContextOptions): Context;
    /**
     * Handle a context.
     * @param {Context} context The context to handle.
     */
    addContext(context: Context): void;
    /**
     * Listen context events.
     * @private
     * @param {Context} context The context to listen.
     */
    private _listenContext;
    /**
     * Unlisten context events.
     * @private
     * @param {Context} context The context to unlisten.
     */
    private _unlistenContext;
    /**
     * Unhandle a context.
     * @param {Context} context The context to remove.
     */
    removeContext(context: Context): void;
    /**
     * Destroy the Lock primary context.
     */
    destroy(): void;
}
/**
 * The window manager instance.
 */
export const windowManager: Manager;
import { Context } from "./Context.js";
