import type { ComponentInstance } from './Component';
/**
 * Async event interface.
 */
export type AsyncEvent = Event & {
    respondWith(callback: () => Promise<unknown>): void;
};
/**
 * Describe the signature of a delegated event callback.
 * @param event The original DOM event.
 * @param target The matched delegated element.
 */
export type DelegatedEventCallback = (event: Event, target?: Node) => unknown;
/**
 * A descriptor for an event delegation.
 */
export type DelegatedEventDescriptor = AddEventListenerOptions & {
    target?: EventTarget;
    callback: DelegatedEventCallback;
};
/**
 * Property configuration for properties accessor.
 */
export type ListenerConfig = DelegatedEventCallback | DelegatedEventDescriptor;
/**
 * Delegate an Event listener.
 *
 * @param element The root element for the delegation
 * @param eventName The event name to listen
 * @param selector The selector to delegate
 * @param callback The callback to trigger when an Event matches the delegation
 * @param options An options object that specifies characteristics about the event listener. @see [MDN]{@link https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener}
 */
export declare const delegateEventListener: (element: Element, eventName: string, selector: string | null, callback: DelegatedEventCallback, options?: AddEventListenerOptions) => void;
/**
 * Remove an Event delegation.
 *
 * @param element The root element of the delegation
 * @param eventName The Event name to undelegate
 * @param selector The selector to undelegate
 * @param callback The callback to remove
 */
export declare const undelegateEventListener: (element: Element, eventName: string, selector: string | null, callback: DelegatedEventCallback) => void;
/**
 * Dispatch a custom Event.
 * @param element The dispatcher node.
 * @param event The event to dispatch or the name of the synthetic event to create.
 * @param detail Detail object of the event.
 * @param bubbles Should the event bubble.
 * @param cancelable Should the event be cancelable.
 * @param composed Is the event composed.
 * @returns True if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.
 */
export declare const dispatchEvent: (element: Element, event: Event | string, detail?: CustomEventInit['detail'], bubbles?: boolean, cancelable?: boolean, composed?: boolean) => boolean;
/**
 * Dispatch an async custom Event.
 *
 * @param element The dispatcher node.
 * @param event The event to dispatch or the name of the synthetic event to create.
 * @param detail Detail object of the event.
 * @param bubbles Should the event bubble.
 * @param cancelable Should the event be cancelable.
 * @param composed Is the event composed.
 */
export declare const dispatchAsyncEvent: (element: Element, event: Event | string, detail?: CustomEventInit['detail'], bubbles?: boolean, cancelable?: boolean, composed?: boolean) => Promise<unknown[]>;
/**
 * A Symbol which contains all listeners instances of a component constructor.
 */
declare const LISTENERS_SYMBOL: unique symbol;
/**
 * An object with listeners.
 */
type WithListeners<T extends ComponentInstance> = T & {
    [LISTENERS_SYMBOL]?: Listener[];
};
/**
 * The listener interface.
 */
type Listener = {
    event: string;
    selector: string | null;
    target: EventTarget | null;
    callback: DelegatedEventCallback;
    options?: AddEventListenerOptions;
};
/**
 * Retrieve all listeners descriptors.
 * @param prototype The component prototype.
 * @returns A list of listeners.
 */
export declare const getListeners: <T extends ComponentInstance<HTMLElement>>(prototype: WithListeners<T>) => Listener[];
/**
 * Set listeners to a prototype.
 * @param prototype The component prototype.
 * @param listeners The list of listeners to set.
 */
export declare const setListeners: <T extends ComponentInstance<HTMLElement>>(prototype: WithListeners<T>, listeners: Listener[]) => void;
/**
 * Add an event listener to the prototype.
 * @param prototype The component prototype.
 * @param eventName The name of the event to listen.
 * @param target The event target of the listener.
 * @param selector The selector event target of the listener.
 * @param callback The event callback.
 * @param options The event listener options.
 */
export declare function defineListener<T extends ComponentInstance>(prototype: WithListeners<T>, eventName: string, target: EventTarget | null, selector: string | null, callback: DelegatedEventCallback, options?: AddEventListenerOptions): void;
/**
 * Define component listeners.
 * @param prototype The component prototype.
 */
export declare const defineListeners: <T extends ComponentInstance<HTMLElement>>(prototype: T) => void;
/**
 * Add a property observer to a component prototype.
 * @param targetOrClassElement The component prototype.
 * @param eventName The name of the event.
 * @param target The event target for the listener.
 * @param selector The selector event target for the listener.
 * @param options Listener options.
 * @param methodKey The method name.
 * @returns The property descriptor.
 */
export declare const createListener: <T extends ComponentInstance<HTMLElement>, P extends Exclude<{ [K in keyof T]: T[K] extends Function ? K : never; }[keyof T], never>>(targetOrClassElement: T, eventName: string, target: EventTarget | null, selector: string | null, options: AddEventListenerOptions, methodKey?: P | undefined) => any;
declare function listen(eventName: string, options?: AddEventListenerOptions): Function;
declare function listen(eventName: string, selector: string, options?: AddEventListenerOptions): Function;
declare function listen(eventName: string, target: EventTarget, options?: AddEventListenerOptions): Function;
export { listen };
