import type { Template } from './JSX';
import type { Context } from './Context';
/**
 * Compile a string into virtual DOM template.
 * @param string The string to compile.
 * @returns The virtual DOM template.
 */
export declare const compile: (string: string) => Template;
declare function html(string: TemplateStringsArray, ...values: unknown[]): Template;
/**
 * @deprecated use `compile` function instead.
 */
declare function html(string: string): Template;
export { html };
/**
* A filter function signature for template items.
*
* @param item The template item to check.
* @returns A truthy value for valid items, a falsy for value for invalid ones.
*/
export type Filter = (item: Node) => boolean;
/**
 * Render a set of nodes into the render root, with some checks for Nodes in order to avoid
 * useless changes in the tree and to mantain or update the state of compatible Nodes.
 *
 * @param parent The root Node for the render.
 * @param template The child (or the children) to render in Virtual DOM format or already generated.
 * @param slot Should handle slot children.
 * @param context The render context of the root.
 * @param root The current root node of the render.
 * @param rootContext The current root context of the render.
 * @param namespace The current namespace uri of the render.
 * @param fragment The fragment context to update.
 * @returns The resulting child nodes list.
 */
export declare const internalRender: (parent: Node, template: Template, slot: boolean | undefined, context: Context, root: Node, rootContext?: Context, namespace?: string, fragment?: Context) => Node[];
/**
 * Render a set of Nodes into another, with some checks for Nodes in order to avoid
 * useless changes in the tree and to mantain or update the state of compatible Nodes.
 *
 * @param input The child (or the children) to render in Virtual DOM format or already generated.
 * @param root The root Node for the render.
 * @param slot Should render to slot children.
 * @returns The resulting child Nodes.
 */
export declare const render: (input: Template, root?: Node, slot?: boolean) => Node | Node[] | void;
